/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/admin/uploadManifest": {
    /**
     * Upload a variable manifest.
     * @description The uploaded file must be in CSV format.
     */
    post: operations["uploadVariableManifest"];
  };
  "/api/v1/admin/users": {
    post: operations["createUser"];
  };
  "/api/v1/admin/users/{id}": {
    put: operations["updateUser"];
    delete: operations["deleteUser"];
  };
  "/api/v1/login": {
    /**
     * Redirects to a specified URL after a successful login.
     * @description For interactive web applications, this can be used to redirect the user to a login page to allow the application to make other API requests. If the user isn't already logged in, hitting this endpoint will redirect them to a login page. After logging in, Keycloak will redirect them back to this endpoint, which will then redirect them to the requested URL. One approach is to use this in error response handlers: if an API request returns HTTP 401 Unauthorized, set location.href to this endpoint and set "redirect" to the URL of the page the user was on so they'll return there after logging in.
     */
    get: operations["login"];
  };
  "/api/v1/methodologies": {
    /** Gets a list of all the valid methodologies. */
    get: operations["listMethodologies"];
  };
  "/api/v1/pdds": {
    /** Gets a list of all the documents. */
    get: operations["listPdds"];
    /** Creates a new document. */
    post: operations["createPdd"];
  };
  "/api/v1/pdds/{documentId}/upgrade": {
    /**
     * Upgrades a document to a newer manifest.
     * @description The manifest must be for the same methodology as the existing manifest.
     */
    post: operations["upgradeManifest"];
  };
  "/api/v1/pdds/{id}": {
    /** Gets a document. */
    get: operations["getPdd"];
    /** Updates a document. */
    put: operations["updatePdd"];
  };
  "/api/v1/pdds/{id}/history": {
    /** Gets the history of a document. This includes both information about document edits and information about saved versions. */
    get: operations["getDocumentHistory"];
  };
  "/api/v1/pdds/{pddId}/images": {
    post: operations["uploadImageValue"];
  };
  "/api/v1/pdds/{pddId}/images/{valueId}": {
    /**
     * Gets the contents of an image variable value.
     * @description Optional maxWidth and maxHeight parameters may be included to control the dimensions of the image; the server will scale the original down as needed. If neither parameter is specified, the original full-size image will be returned. The aspect ratio of the original image is maintained, so the returned image may be smaller than the requested width and height. If only maxWidth or only maxHeight is supplied, the other dimension will be computed based on the original image's aspect ratio.
     */
    get: operations["getImageValue"];
  };
  "/api/v1/pdds/{pddId}/values": {
    /**
     * Get the values of the variables in a document.
     * @description This may be used to fetch the full set of current values (the default behavior), the values from a saved version (if maxValueId is specified), or to poll for recent edits (if minValueId is specified).
     */
    get: operations["listVariableValues"];
    /**
     * Update the values of the variables in a document.
     * @description Make a list of changes to a document's variable values. The changes are applied in order and are treated as an atomic unit. That is, the changes will either all succeed or all fail; there won't be a case where some of the changes are applied and some aren't. See the payload descriptions for more details about the operations you can perform on values.
     */
    post: operations["updateVariableValues"];
  };
  "/api/v1/pdds/{pddId}/versions": {
    /** Saves a version of a document. */
    post: operations["createSavedPddVersion"];
  };
  "/api/v1/pdds/{pddId}/versions/{versionId}": {
    /** Gets details of a specific saved version of a document. */
    get: operations["getSavedPddVersion"];
    /** Updates a saved version of a document. */
    put: operations["updateSavedPddVersion"];
  };
  "/api/v1/users": {
    get: operations["listUsers"];
  };
  "/api/v1/users/me": {
    /** Gets the current user's profile information. */
    get: operations["getMe"];
    /** Updates the current user's editable profile information. */
    put: operations["updateMe"];
  };
  "/api/v1/users/me/preferences": {
    /** Gets the current user's preferences. */
    get: operations["getPreferences"];
    /** Saves the current user's preferences. */
    put: operations["savePreferences"];
  };
  "/api/v1/users/{id}": {
    get: operations["getUser"];
  };
  "/api/v1/variables": {
    get: operations["listVariables"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AdminUpdateUserRequestPayload: {
      firstName?: string;
      lastName?: string;
      /**
       * @description Admin type to set. Only super admins can set the admin type to SuperAdmin.
       * @enum {string}
       */
      userType: "Internal" | "Admin" | "GhostUser";
    };
    /**
     * @description Operation that appends a new value to a variable. If the variable does not have an existing value, creates the value with list position 0.
     *
     * If the variable has an existing value and it is NOT a list, replaces the existing value. In this case, the new list position will be 0.
     *
     * If the variable has existing values and it IS a list, creates the value with a list position 1 greater than the currently-highest position, that is, appends the value to the list.
     *
     * If the variable is a table column and no rowValueId is specified, associates the new value with the most recently appended row. You MUST append a row value before appending the values of the columns.
     */
    AppendValueOperationPayload: WithRequired<{
      operation: "Append";
    } & Omit<components["schemas"]["ValueOperationPayload"], "operation"> & {
      /**
       * Format: int64
       * @description If the variable is a table column and the new value should be appended to an existing row, the existing row's value ID.
       */
      rowValueId?: number;
      value?: components["schemas"]["NewValuePayload"];
      /** Format: int64 */
      variableId?: number;
    }, "value" | "variableId">;
    CreatePddRequestPayload: {
      /** Format: int64 */
      methodologyId: number;
      name: string;
      organizationName: string;
      /** Format: int64 */
      ownedBy: number;
    };
    CreatePddResponsePayload: {
      pdd: components["schemas"]["PddPayload"];
      status: components["schemas"]["SuccessOrError"];
    };
    CreateSavedPddVersionRequestPayload: {
      /** @default false */
      isSubmitted?: boolean;
      name: string;
    };
    CreateSavedPddVersionResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      version: components["schemas"]["PddSavedVersionPayload"];
    };
    CreateUserRequestPayload: {
      email: string;
      firstName?: string;
      lastName?: string;
      /**
       * @description User type to create.
       * @enum {string}
       */
      userType: "Internal" | "Admin" | "GhostUser";
    };
    CreateUserResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      user: components["schemas"]["UserDetailsPayload"];
    };
    DateVariablePayload: {
      type: "Date";
    } & Omit<components["schemas"]["VariablePayload"], "type">;
    /**
     * @description Operation that deletes a value from a variable. Deletion is non-destructive; this actually creates a new value with its own value ID, where the new value is marked as deleted. This "is deleted" value is included in incremental value query results.
     *
     * If the variable is a list and there are other values with higher list positions, the remaining items will be renumbered such that the list remains contiguously numbered starting at 0.
     *
     * If the variable is a table, or in other words if the value is a table row, any values associated with the row are also deleted. The row itself gets a new value that is marked as deleted, and the new values that are created to delete the row's contents are associated with this newly-created deleted row value.
     */
    DeleteValueOperationPayload: WithRequired<{
      operation: "Delete";
    } & Omit<components["schemas"]["ValueOperationPayload"], "operation"> & {
      /** Format: int64 */
      valueId?: number;
    }, "existingValueId" | "valueId">;
    ErrorDetails: {
      message: string;
    };
    ExistingDateValuePayload: WithRequired<{
      type: "Date";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      /** Format: date */
      dateValue?: string;
    }, "dateValue" | "id" | "listPosition" | "type">;
    /** @description Represents the deletion of an earlier value at the same location. This is only included when you are querying for incremental changes to a document's values. */
    ExistingDeletedValuePayload: WithRequired<{
      type: "Deleted";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type">, "id" | "listPosition" | "type">;
    /** @description Metadata about an image. The actual image data (e.g., the JPEG or PNG file) must be retrieved in a separate request using the value ID in this payload. */
    ExistingImageValuePayload: WithRequired<{
      type: "Image";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      caption?: string;
    }, "id" | "listPosition" | "type">;
    ExistingLinkValuePayload: WithRequired<{
      type: "Link";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      title?: string;
      /** Format: uri */
      url?: string;
    }, "id" | "listPosition" | "type" | "url">;
    ExistingNumberValuePayload: WithRequired<{
      type: "Number";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      numberValue?: number;
    }, "id" | "listPosition" | "numberValue" | "type">;
    ExistingSectionTextValuePayload: WithRequired<{
      type: "SectionText";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      textValue?: string;
    }, "id" | "listPosition" | "textValue" | "type">;
    ExistingSectionVariableValuePayload: WithRequired<{
      type: "SectionVariable";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & ({
      /** @enum {string} */
      displayStyle?: "Inline" | "Block";
      /** @enum {string} */
      usageType?: "Injection" | "Reference";
      /** Format: int64 */
      variableId?: number;
    }), "id" | "listPosition" | "type" | "usageType" | "variableId">;
    ExistingSelectValuePayload: WithRequired<{
      type: "Select";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      optionValues?: number[];
    }, "id" | "listPosition" | "optionValues" | "type">;
    /** @description A row in a table. Each row has its own value ID. ExistingVariableValuesPayload includes this ID for values of variables that are defined as columns of a table. */
    ExistingTableValuePayload: WithRequired<{
      type: "Table";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type">, "id" | "listPosition" | "type">;
    ExistingTextValuePayload: WithRequired<{
      type: "Text";
    } & Omit<components["schemas"]["ExistingValuePayload"], "type"> & {
      textValue?: string;
    }, "id" | "listPosition" | "textValue" | "type">;
    /** @description Values of this variable or this table cell. When getting the full set of values for a document, this will be the complete list of this variable's values in order of list position. When getting incremental changes to a document, this is only the items that have changed, and existing items won't be present. For example, if a variable is a list and has 3 values, and a fourth value is added, the incremental list of values in this payload will have one item and its list position will be 3 (since lists are 0-indexed). */
    ExistingValuePayload: {
      citation?: string;
      /** Format: int64 */
      id: number;
      /** Format: int32 */
      listPosition: number;
      /** @enum {string} */
      type: "Date" | "Deleted" | "Image" | "Link" | "Number" | "SectionText" | "SectionVariable" | "Select" | "Table" | "Text";
    };
    ExistingVariableValuesPayload: {
      /**
       * Format: int64
       * @description If this is the value of a table cell, the ID of the row it's part of.
       */
      rowValueId?: number;
      /** @description Values of this variable or this table cell. When getting the full set of values for a document, this will be the complete list of this variable's values in order of list position. When getting incremental changes to a document, this is only the items that have changed, and existing items won't be present. For example, if a variable is a list and has 3 values, and a fourth value is added, the incremental list of values in this payload will have one item and its list position will be 3 (since lists are 0-indexed). */
      values: (components["schemas"]["ExistingDateValuePayload"] | components["schemas"]["ExistingDeletedValuePayload"] | components["schemas"]["ExistingImageValuePayload"] | components["schemas"]["ExistingLinkValuePayload"] | components["schemas"]["ExistingNumberValuePayload"] | components["schemas"]["ExistingSectionTextValuePayload"] | components["schemas"]["ExistingSectionVariableValuePayload"] | components["schemas"]["ExistingSelectValuePayload"] | components["schemas"]["ExistingTableValuePayload"] | components["schemas"]["ExistingTextValuePayload"])[];
      /** Format: int64 */
      variableId: number;
    };
    GetDocumentHistoryResponsePayload: {
      /** @description List of events in the document's history in reverse chronological order. The last element is always the "Created" event. */
      history: (components["schemas"]["PddHistoryCreatedPayload"] | components["schemas"]["PddHistoryEditedPayload"] | components["schemas"]["PddHistorySavedPayload"])[];
      status: components["schemas"]["SuccessOrError"];
    };
    GetPddResponsePayload: {
      pdd: components["schemas"]["PddPayload"];
      status: components["schemas"]["SuccessOrError"];
    };
    GetPreferencesResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      value: {
        [key: string]: unknown;
      };
    };
    GetSavedPddVersionResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      version: components["schemas"]["PddSavedVersionPayload"];
    };
    GetUserResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      user: components["schemas"]["UserDetailsPayload"];
    };
    ImageVariablePayload: {
      type: "Image";
    } & Omit<components["schemas"]["VariablePayload"], "type">;
    LinkVariablePayload: {
      type: "Link";
    } & Omit<components["schemas"]["VariablePayload"], "type">;
    ListMethodologiesResponsePayload: {
      methodologies: components["schemas"]["MethodologyPayload"][];
      status: components["schemas"]["SuccessOrError"];
    };
    ListPddsResponsePayload: {
      pdds: components["schemas"]["PddPayload"][];
      status: components["schemas"]["SuccessOrError"];
    };
    ListUsersResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      users: components["schemas"]["UserDetailsPayload"][];
    };
    ListVariableValuesResponsePayload: {
      /**
       * Format: int64
       * @description The next unused value ID. You can pass this back to the endpoint as the minValueId parameter to poll for newly-updated values.
       */
      nextValueId: number;
      status: components["schemas"]["SuccessOrError"];
      /** @description Variable values organized by variable ID and table row. If you are getting incremental values (that is, you passed minValueId to the endpoint) this list may include values of type "Deleted" to indicate that existing values were deleted and not replaced with new values. */
      values: components["schemas"]["ExistingVariableValuesPayload"][];
    };
    ListVariablesResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      variables: (components["schemas"]["DateVariablePayload"] | components["schemas"]["ImageVariablePayload"] | components["schemas"]["LinkVariablePayload"] | components["schemas"]["NumberVariablePayload"] | components["schemas"]["SectionVariablePayload"] | components["schemas"]["SelectVariablePayload"] | components["schemas"]["TableVariablePayload"] | components["schemas"]["TextVariablePayload"])[];
    };
    MethodologyPayload: {
      /** Format: int64 */
      id: number;
      name: string;
      /**
       * Format: int64
       * @description ID of the most recent variable manifest for the methodology, if any.
       */
      variableManifestId?: number;
    };
    NewDateValuePayload: WithRequired<{
      type: "Date";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      citation?: string;
      /** Format: date */
      dateValue?: string;
    }, "dateValue">;
    /** @description Updated metadata about an image value. May only be used in Update operations, and cannot be used to replace the actual image data. */
    NewImageValuePayload: {
      type: "Image";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      caption?: string;
      citation?: string;
    };
    NewLinkValuePayload: WithRequired<{
      type: "Link";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      citation?: string;
      title?: string;
      /** Format: uri */
      url?: string;
    }, "url">;
    NewNumberValuePayload: WithRequired<{
      type: "Number";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      citation?: string;
      numberValue?: number;
    }, "numberValue">;
    NewSectionTextValuePayload: WithRequired<{
      type: "SectionText";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      /** @description Citation for this chunk of text. If you want text with multiple citations at different positions, you can split it into multiple text values and put a citation on each of them. */
      citation?: string;
      textValue?: string;
    }, "textValue">;
    NewSectionVariableValuePayload: WithRequired<{
      type: "SectionVariable";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & ({
      /** @enum {string} */
      displayStyle?: "Inline" | "Block";
      /** @enum {string} */
      usageType?: "Injection" | "Reference";
      /** Format: int64 */
      variableId?: number;
    }), "usageType" | "variableId">;
    NewSelectValuePayload: WithRequired<{
      type: "Select";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      citation?: string;
      optionIds?: number[];
    }, "optionIds">;
    NewTableValuePayload: {
      type: "Table";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      /** @description Citations on table values can be used if you want a citation that is associated with the table as a whole rather than with individual cells, or if you want a citation on an empty table: append a row with no column values but with a citation. */
      citation?: string;
    };
    NewTextValuePayload: WithRequired<{
      type: "Text";
    } & Omit<components["schemas"]["NewValuePayload"], "type"> & {
      citation?: string;
      textValue?: string;
    }, "textValue">;
    /** @description Supertype for payloads that represent new variable values. See the descriptions of individual payload types for more details. */
    NewValuePayload: {
      type: string;
    };
    NumberVariablePayload: WithRequired<{
      type: "Number";
    } & Omit<components["schemas"]["VariablePayload"], "type"> & {
      /** Format: int32 */
      decimalPlaces?: number;
      maxValue?: number;
      minValue?: number;
    }, "decimalPlaces">;
    /** @description History entry about the creation of the document. This is always the last element in the reverse-chronological list of history events. It has the same information as the createdBy and createdTime fields in PddPayload. */
    PddHistoryCreatedPayload: WithRequired<{
      type: "Created";
    } & Omit<components["schemas"]["PddHistoryPayload"], "type">, "createdBy" | "createdTime" | "type">;
    /** @description History entry about a document being edited. This represents the most recent edit by the given user; if the same user edits the document multiple times in a row, only the last edit will be listed in the history. */
    PddHistoryEditedPayload: WithRequired<{
      type: "Edited";
    } & Omit<components["schemas"]["PddHistoryPayload"], "type">, "createdBy" | "createdTime" | "type">;
    PddHistoryPayload: {
      /** Format: int64 */
      createdBy: number;
      /** Format: date-time */
      createdTime: string;
      /** @enum {string} */
      type: "Created" | "Edited" | "Saved";
    };
    /** @description History entry about a saved version of a document. The maxVariableValueId and variableManifestId may be used to retrieve the contents of the saved version. */
    PddHistorySavedPayload: WithRequired<{
      type: "Saved";
    } & Omit<components["schemas"]["PddHistoryPayload"], "type"> & {
      isSubmitted?: boolean;
      /** Format: int64 */
      maxVariableValueId?: number;
      name?: string;
      /** Format: int64 */
      variableManifestId?: number;
      /** Format: int64 */
      versionId?: number;
    }, "createdBy" | "createdTime" | "isSubmitted" | "maxVariableValueId" | "name" | "type" | "variableManifestId" | "versionId">;
    PddPayload: {
      /** Format: int64 */
      createdBy: number;
      /** Format: date-time */
      createdTime: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      methodologyId: number;
      /** Format: int64 */
      modifiedBy: number;
      /** Format: date-time */
      modifiedTime: string;
      name: string;
      organizationName: string;
      /** Format: int64 */
      ownedBy: number;
      /** @enum {string} */
      status: "Draft" | "Locked" | "Published" | "Ready" | "Submitted";
      /** Format: int64 */
      variableManifestId: number;
    };
    /** @description Information about a saved version of a document. The maxVariableValueId and variableManifestId may be used to retrieve the contents of the saved version. */
    PddSavedVersionPayload: {
      /** Format: int64 */
      createdBy: number;
      /** Format: date-time */
      createdTime: string;
      isSubmitted: boolean;
      /** Format: int64 */
      maxVariableValueId: number;
      name: string;
      /** Format: int64 */
      variableManifestId: number;
      /** Format: int64 */
      versionId: number;
    };
    /**
     * @description Operation that replaces all the values of a variable with new ones. This is an "upsert" operation: it replaces any existing values, or creates new values if there weren't already any.
     *
     * This operation may not be used with table variables.
     *
     * If the variable is a list and previously had more values than are included in this payload, the existing values with higher-numbered list positions are deleted.
     *
     * If the variable is not a list, it is invalid for this payload to include more than one value.
     */
    ReplaceValuesOperationPayload: WithRequired<{
      operation: "Replace";
    } & Omit<components["schemas"]["ValueOperationPayload"], "operation"> & {
      /**
       * Format: int64
       * @description If the variable is a table column, the value ID of the row whose values should be replaced.
       */
      rowValueId?: number;
      values?: components["schemas"]["NewValuePayload"][];
      /** Format: int64 */
      variableId?: number;
    }, "values" | "variableId">;
    SavePreferencesRequestPayload: {
      value: {
        [key: string]: unknown;
      };
    };
    SectionVariablePayload: WithRequired<{
      type: "Section";
    } & Omit<components["schemas"]["VariablePayload"], "type"> & {
      children?: components["schemas"]["SectionVariablePayload"][];
      /** @description IDs of variables that this section recommends. */
      recommends?: number[];
      renderHeading?: boolean;
    }, "children" | "recommends" | "renderHeading">;
    SelectOptionPayload: {
      description?: string;
      /** Format: int64 */
      id: number;
      name: string;
      renderedText?: string;
    };
    SelectVariablePayload: WithRequired<{
      type: "Select";
    } & Omit<components["schemas"]["VariablePayload"], "type"> & {
      isMultiple?: boolean;
      options?: components["schemas"]["SelectOptionPayload"][];
    }, "isMultiple" | "options">;
    SimpleErrorResponsePayload: {
      error: components["schemas"]["ErrorDetails"];
      status: components["schemas"]["SuccessOrError"];
    };
    SimpleSuccessResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
    };
    /**
     * @description Indicates of success or failure of the requested operation.
     * @enum {string}
     */
    SuccessOrError: "ok" | "error";
    TableColumnPayload: {
      isHeader: boolean;
      variable: components["schemas"]["VariablePayload"];
    };
    TableVariablePayload: WithRequired<{
      type: "Table";
    } & Omit<components["schemas"]["VariablePayload"], "type"> & ({
      columns?: components["schemas"]["TableColumnPayload"][];
      /** @enum {string} */
      tableStyle?: "Horizontal" | "Vertical";
    }), "columns" | "tableStyle">;
    TextVariablePayload: WithRequired<{
      type: "Text";
    } & Omit<components["schemas"]["VariablePayload"], "type"> & ({
      /** @enum {string} */
      textType?: "SingleLine" | "MultiLine";
    }), "textType">;
    UpdatePddRequestPayload: {
      name: string;
      organizationName: string;
      /** Format: int64 */
      ownedBy: number;
    };
    UpdateSavedPddVersionRequestPayload: {
      isSubmitted: boolean;
    };
    UpdateUserRequestPayload: {
      firstName: string;
      lastName: string;
    };
    /**
     * @description Operation that replaces a single existing value with a new one. The new value will have the same list position as the existing one.
     *
     * This operation may not be used with table variables.
     *
     * If the variable is a table column, the new value will be contained in the same row as the existing one.
     */
    UpdateValueOperationPayload: WithRequired<{
      operation: "Update";
    } & Omit<components["schemas"]["ValueOperationPayload"], "operation"> & {
      value?: components["schemas"]["NewValuePayload"];
      /** Format: int64 */
      valueId?: number;
    }, "existingValueId" | "value" | "valueId">;
    UpdateVariableValuesRequestPayload: {
      /** @description List of operations to perform on the document's values. The operations are applied in order, and atomically: if any of them fail, none of them will be applied. */
      operations: (components["schemas"]["AppendValueOperationPayload"] | components["schemas"]["DeleteValueOperationPayload"] | components["schemas"]["ReplaceValuesOperationPayload"] | components["schemas"]["UpdateValueOperationPayload"])[];
    };
    UpgradeManifestRequestPayload: {
      /**
       * Format: int64
       * @description ID of manifest to upgrade the document to. This must be greater than the document's current manifest ID (downgrades are not supported) and must be for the same methodology as the current manifest.
       */
      variableManifestId: number;
    };
    UploadImageFileResponsePayload: {
      status: components["schemas"]["SuccessOrError"];
      /** Format: int64 */
      valueId: number;
    };
    UserDetailsPayload: {
      /** Format: date-time */
      createdTime: string;
      email: string;
      firstName?: string;
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      lastLoginTime?: string;
      lastName?: string;
      /** @enum {string} */
      userType: "Internal" | "Admin" | "GhostUser";
    };
    /** @description Supertype of the payloads that describe which operations to perform on a variable's value(s). See the descriptions of the individual operations for details. */
    ValueOperationPayload: {
      /** Format: int64 */
      existingValueId?: number;
      operation: string;
    };
    VariablePayload: {
      description?: string;
      /** Format: int64 */
      id: number;
      isList: boolean;
      name: string;
      /** Format: int32 */
      position: number;
      /** @description IDs of sections that recommend this variable. */
      recommendedBy?: number[];
      /** @enum {string} */
      type: "Number" | "Text" | "Date" | "Image" | "Select" | "Table" | "Link" | "Section";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Upload a variable manifest.
   * @description The uploaded file must be in CSV format.
   */
  uploadVariableManifest: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file: string;
          /**
           * Format: int64
           * @description The Methodology ID that this manifest is defined for
           */
          methodologyId: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateUserResponsePayload"];
        };
      };
    };
  };
  updateUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminUpdateUserRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  /**
   * Redirects to a specified URL after a successful login.
   * @description For interactive web applications, this can be used to redirect the user to a login page to allow the application to make other API requests. If the user isn't already logged in, hitting this endpoint will redirect them to a login page. After logging in, Keycloak will redirect them back to this endpoint, which will then redirect them to the requested URL. One approach is to use this in error response handlers: if an API request returns HTTP 401 Unauthorized, set location.href to this endpoint and set "redirect" to the URL of the page the user was on so they'll return there after logging in.
   */
  login: {
    parameters: {
      query: {
        /** @description URL to redirect to after login. */
        redirect: string;
      };
    };
    responses: {
      /** @description Redirects to a login page if not already logged in. After login, redirects to the URL specified in the "redirect" parameter. */
      302: {
        content: never;
      };
    };
  };
  /** Gets a list of all the valid methodologies. */
  listMethodologies: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMethodologiesResponsePayload"];
        };
      };
    };
  };
  /** Gets a list of all the documents. */
  listPdds: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPddsResponsePayload"];
        };
      };
    };
  };
  /** Creates a new document. */
  createPdd: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePddRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreatePddResponsePayload"];
        };
      };
    };
  };
  /**
   * Upgrades a document to a newer manifest.
   * @description The manifest must be for the same methodology as the existing manifest.
   */
  upgradeManifest: {
    parameters: {
      path: {
        documentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeManifestRequestPayload"];
      };
    };
    responses: {
      /** @description The requested operation succeeded. */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
      /** @description The document does not exist or the requested manifest does not exist. */
      404: {
        content: {
          "application/json": components["schemas"]["SimpleErrorResponsePayload"];
        };
      };
      /** @description The requested manifest is for a different methodology than the current one. */
      409: {
        content: {
          "application/json": components["schemas"]["SimpleErrorResponsePayload"];
        };
      };
    };
  };
  /** Gets a document. */
  getPdd: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetPddResponsePayload"];
        };
      };
    };
  };
  /** Updates a document. */
  updatePdd: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePddRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  /** Gets the history of a document. This includes both information about document edits and information about saved versions. */
  getDocumentHistory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetDocumentHistoryResponsePayload"];
        };
      };
    };
  };
  uploadImageValue: {
    parameters: {
      path: {
        pddId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          caption?: string;
          citation?: string;
          /** Format: binary */
          file: string;
          /**
           * Format: int32
           * @description If the variable is a list, which list position to use for the value. If not specified, the server will use the next available list position if the variable is a list, or will replace any existing image if the variable is not a list.
           */
          listPosition?: number;
          /**
           * Format: int64
           * @description If the variable is a table column, value ID of the row the value should belong to.
           */
          rowValueId?: number;
          /** Format: int64 */
          variableId: number;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadImageFileResponsePayload"];
        };
      };
    };
  };
  /**
   * Gets the contents of an image variable value.
   * @description Optional maxWidth and maxHeight parameters may be included to control the dimensions of the image; the server will scale the original down as needed. If neither parameter is specified, the original full-size image will be returned. The aspect ratio of the original image is maintained, so the returned image may be smaller than the requested width and height. If only maxWidth or only maxHeight is supplied, the other dimension will be computed based on the original image's aspect ratio.
   */
  getImageValue: {
    parameters: {
      query?: {
        /** @description Maximum desired width in pixels. If neither this nor maxHeight is specified, the full-sized original image will be returned. If this is specified, an image no wider than this will be returned. The image may be narrower than this value if needed to preserve the aspect ratio of the original. */
        maxWidth?: string;
        /** @description Maximum desired height in pixels. If neither this nor maxWidth is specified, the full-sized original image will be returned. If this is specified, an image no taller than this will be returned. The image may be shorter than this value if needed to preserve the aspect ratio of the original. */
        maxHeight?: string;
      };
      path: {
        pddId: number;
        valueId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
          "image/jpeg": string;
          "image/png": string;
        };
      };
    };
  };
  /**
   * Get the values of the variables in a document.
   * @description This may be used to fetch the full set of current values (the default behavior), the values from a saved version (if maxValueId is specified), or to poll for recent edits (if minValueId is specified).
   */
  listVariableValues: {
    parameters: {
      query?: {
        /** @description If specified, only return values with this ID or higher. Use this to poll for incremental updates to a document. Incremental results may include values of type 'Deleted' in cases where, e.g., elements have been removed from a list. */
        minValueId?: number;
        /** @description If specified, only return values with this ID or lower. Use this to retrieve saved document versions. */
        maxValueId?: number;
      };
      path: {
        pddId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListVariableValuesResponsePayload"];
        };
      };
    };
  };
  /**
   * Update the values of the variables in a document.
   * @description Make a list of changes to a document's variable values. The changes are applied in order and are treated as an atomic unit. That is, the changes will either all succeed or all fail; there won't be a case where some of the changes are applied and some aren't. See the payload descriptions for more details about the operations you can perform on values.
   */
  updateVariableValues: {
    parameters: {
      path: {
        pddId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVariableValuesRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  /** Saves a version of a document. */
  createSavedPddVersion: {
    parameters: {
      path: {
        pddId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSavedPddVersionRequestPayload"];
      };
    };
    responses: {
      /** @description The requested operation succeeded. */
      200: {
        content: {
          "application/json": components["schemas"]["CreateSavedPddVersionResponsePayload"];
        };
      };
      /** @description The requested resource was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["SimpleErrorResponsePayload"];
        };
      };
      /** @description The document has no values to save. */
      409: {
        content: {
          "application/json": components["schemas"]["SimpleErrorResponsePayload"];
        };
      };
    };
  };
  /** Gets details of a specific saved version of a document. */
  getSavedPddVersion: {
    parameters: {
      path: {
        pddId: number;
        versionId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetSavedPddVersionResponsePayload"];
        };
      };
    };
  };
  /** Updates a saved version of a document. */
  updateSavedPddVersion: {
    parameters: {
      path: {
        pddId: number;
        versionId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSavedPddVersionRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  listUsers: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListUsersResponsePayload"];
        };
      };
    };
  };
  /** Gets the current user's profile information. */
  getMe: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserResponsePayload"];
        };
      };
    };
  };
  /** Updates the current user's editable profile information. */
  updateMe: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  /** Gets the current user's preferences. */
  getPreferences: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetPreferencesResponsePayload"];
        };
      };
    };
  };
  /** Saves the current user's preferences. */
  savePreferences: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SavePreferencesRequestPayload"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SimpleSuccessResponsePayload"];
        };
      };
    };
  };
  getUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserResponsePayload"];
        };
      };
    };
  };
  listVariables: {
    parameters: {
      query: {
        manifestId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListVariablesResponsePayload"];
        };
      };
    };
  };
}
