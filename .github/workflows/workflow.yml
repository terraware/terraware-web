# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deployment

on:
  push:
    branches:
      - main
      - qa
    tags:
      # Semver (these are glob-like patterns, not regexes; the "." has no special meaning)
      - v[0-9].[0-9]+.[0-9]+
      # Date-based
      - v2[0-9]+.[0-9]+
  pull_request:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set Environment
        run: ./.github/scripts/set-environment.sh

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn

      # This is currently failing because the server hasn't been started yet.
      # Additionally, it's not enough to just output the generated types file.
      # We need to create a script that checks that our types file is up to date.
      #- name: generate schemas
      #  run: yarn generate-types

      - name: Check that code is formatted
        run: yarn prettier --check .

      - name: Run linter
        run: yarn lint

      - name: Do typescript check
        run: yarn ts

      - name: Run unit and integration tests
        run: yarn test

      - name: Download and start backend
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: yarn server:reset
        env:
          KEYCLOAK_AUTH_SERVER_URL: http://dummy/
          KEYCLOAK_CREDENTIALS_SECRET: dummy
          KEYCLOAK_REALM: dummy
          KEYCLOAK_RESOURCE: dummy

      - name: Run end-to-end cypress tests
        # Skip tests on main and releases because of Cypress hanging bug
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
        run: yarn e2e
        # If Cypress hangs, don't let the job sit there for the default 6-hour timeout.
        timeout-minutes: 60
        env:
          REACT_APP_TERRAWARE_API: 'http://localhost:8080'
          REACT_APP_SNACKBAR_TIMEOUT: 1000
          REACT_APP_MAPBOX_TOKEN: ${{ secrets.REACT_APP_MAPBOX_TOKEN }}

      - name: build
        run: yarn build
        env:
          REACT_APP_TERRAWARE_API: ''
          REACT_APP_MAPBOX_TOKEN: ${{ secrets.REACT_APP_MAPBOX_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        if: env.IS_CD == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker build/push
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ env.DOCKER_TAGS }}
          platforms: linux/amd64,linux/arm64
          push: ${{ env.IS_CD == 'true' }}

      - name: Configure AWS Credentials
        if: env.IS_CD == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets[env.AWS_REGION_SECRET_NAME] }}
          role-to-assume: ${{ secrets[env.AWS_ROLE_SECRET_NAME] }}

      - name: Deploy
        if: env.IS_CD == 'true'
        env:
          SSH_CONFIG: ${{ secrets[env.SSH_CONFIG_SECRET_NAME] }}
          SSH_KEY: ${{ secrets[env.SSH_KEY_SECRET_NAME] }}
        run: ./.github/scripts/deploy.sh
